import requests
import csv
import re

# Set your GitLab project ID and access token
PROJECT_ID = 41299063
ACCESS_TOKEN = "glpat-XsRzi9SD8yHJyMavhhh3"

# Define the API endpoint URL
BASE_URL = f"https://gitlab.com/api/v4/projects/{PROJECT_ID}"

# Function to retrieve notes for a specific issue
def get_notes_for_issue(issue_id):
    notes_url = f"{BASE_URL}/issues/{issue_id}/notes"
    response = requests.get(notes_url, headers={"PRIVATE-TOKEN": ACCESS_TOKEN})
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to retrieve notes for issue {issue_id}. Status code: {response.status_code}")
        return []

# Create a CSV file and write the data
issue_ids = []  # List to store unique issue IDs
upload_paths_by_issue = {}  # Dictionary to store upload paths by issue

# Read the list of issue IDs from the input CSV file
with open("new1.csv", mode="r", encoding="utf-8") as input_csv:
    csv_reader = csv.reader(input_csv)
    next(csv_reader)  # Skip the header row if it exists
    issue_ids = [int(row[0]) for row in csv_reader]

# Collect unique upload paths and associate them with issue IDs
for issue_id in issue_ids:
    notes = get_notes_for_issue(issue_id)
    upload_paths = set()  # Use a set to ensure unique paths
    for note in notes:
        body = note["body"]
        uploads = re.findall(r'/uploads/[^)]*', body)
        upload_paths.update(uploads)
    upload_paths_by_issue[issue_id] = upload_paths

# Prepare fieldnames for the output CSV file
fieldnames = ["Issue ID"] + [f"Upload Path {i+1}" for i in range(max(len(paths) for paths in upload_paths_by_issue.values()))]

# Add the prefix to each upload path
prefix = 'file://csvimport/'

# Create a CSV file and write the data
with open("output.csv", mode="w", newline="", encoding="utf-8") as csv_file:
    writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
    writer.writeheader()

    for issue_id in issue_ids:
        data_dict = {"Issue ID": issue_id}
        upload_paths = list(upload_paths_by_issue[issue_id])
        # Add the prefix to each upload path
        upload_paths = [prefix + path for path in upload_paths]
        for i, path in enumerate(upload_paths):
            data_dict[f"Upload Path {i+1}"] = path
        writer.writerow(data_dict)

print("Data has been saved to output.csv")
